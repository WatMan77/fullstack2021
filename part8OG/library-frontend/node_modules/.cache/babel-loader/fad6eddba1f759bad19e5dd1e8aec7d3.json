{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\fullstack2021\\\\part8OG\\\\library-frontend\\\\src\\\\components\\\\Recommend.js\";\nimport React, { useEffect } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { ALL_BOOKS, BOOKS_OF_GENRE, ME } from '../query';\n\nconst Recommend = props => {\n  const books = useQuery(ALL_BOOKS);\n  const [genreBooks, result] = useLazyQuery(BOOKS_OF_GENRE);\n  const user = useQuery(ME);\n  useEffect(() => {\n    if (result.data && !user.loading) {\n      console.log(result.data);\n      genreBooks({\n        variables: {\n          genre: user.data.me.favoriteGenre\n        }\n      });\n    }\n  }, [result, user]);\n  useEffect(() => {});\n  console.log('result?', result);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (books.loading || user.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  const favGenre = user.data.me.favoriteGenre;\n  const favBooks = books.data.allBooks.filter(x => x.genres.includes(favGenre));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Recommendations\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"books in your favorite genre \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, favGenre)), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"published\")), favBooks.map(a => React.createElement(\"tr\", {\n    key: a.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, a.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, a.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, a.published))))));\n};\n\nexport default Recommend;","map":{"version":3,"sources":["C:/Users/Daniel/fullstack2021/part8OG/library-frontend/src/components/Recommend.js"],"names":["React","useEffect","useLazyQuery","useQuery","ALL_BOOKS","BOOKS_OF_GENRE","ME","Recommend","props","books","genreBooks","result","user","data","loading","console","log","variables","genre","me","favoriteGenre","show","favGenre","favBooks","allBooks","filter","x","genres","includes","map","a","title","author","name","published"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,gBAAvC;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,EAApC,QAA8C,UAA9C;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAE3B,QAAMC,KAAK,GAAGN,QAAQ,CAACC,SAAD,CAAtB;AACA,QAAM,CAACM,UAAD,EAAaC,MAAb,IAAuBT,YAAY,CAACG,cAAD,CAAzC;AACA,QAAMO,IAAI,GAAGT,QAAQ,CAACG,EAAD,CAArB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGU,MAAM,CAACE,IAAP,IAAe,CAACD,IAAI,CAACE,OAAxB,EAAiC;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACE,IAAnB;AACAH,MAAAA,UAAU,CAAC;AAAEO,QAAAA,SAAS,EAAE;AAACC,UAAAA,KAAK,EAAEN,IAAI,CAACC,IAAL,CAAUM,EAAV,CAAaC;AAArB;AAAb,OAAD,CAAV;AACD;AACF,GALQ,EAKN,CAACT,MAAD,EAASC,IAAT,CALM,CAAT;AAOAX,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,CAAT;AAIAc,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBL,MAAvB;;AAEA,MAAG,CAACH,KAAK,CAACa,IAAV,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAGZ,KAAK,CAACK,OAAN,IAAiBF,IAAI,CAACE,OAAzB,EAAiC;AAC/B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD;;AAED,QAAMQ,QAAQ,GAAGV,IAAI,CAACC,IAAL,CAAUM,EAAV,CAAaC,aAA9B;AACA,QAAMG,QAAQ,GAAGd,KAAK,CAACI,IAAN,CAAWW,QAAX,CAAoBC,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASC,QAAT,CAAkBN,QAAlB,CAAhC,CAAjB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,QAAJ,CAAhC,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGC,QAAQ,CAACM,GAAT,CAAaC,CAAC,IACb;AAAI,IAAA,GAAG,EAAEA,CAAC,CAACC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,CAAC,CAACC,KAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,CAAC,CAACE,MAAF,CAASC,IAAd,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,CAAC,CAACI,SAAP,CAHF,CADD,CAVH,CADF,CAJF,CADF;AA4BD,CA9DD;;AAgEA,eAAe3B,SAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useLazyQuery, useQuery } from '@apollo/client'\r\nimport { ALL_BOOKS, BOOKS_OF_GENRE, ME } from '../query'\r\n\r\nconst Recommend = (props) => {\r\n\r\n  const books = useQuery(ALL_BOOKS)\r\n  const [genreBooks, result] = useLazyQuery(BOOKS_OF_GENRE)\r\n  const user = useQuery(ME)\r\n\r\n  useEffect(() => {\r\n    if(result.data && !user.loading) {\r\n      console.log(result.data)\r\n      genreBooks({ variables: {genre: user.data.me.favoriteGenre}})\r\n    }\r\n  }, [result, user])\r\n\r\n  useEffect(() => {\r\n    \r\n  })\r\n\r\n  console.log('result?', result)\r\n\r\n  if(!props.show){\r\n    return null\r\n  }\r\n\r\n  if(books.loading || user.loading){\r\n    return (\r\n      <div>\r\n        loading...\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const favGenre = user.data.me.favoriteGenre\r\n  const favBooks = books.data.allBooks.filter(x => x.genres.includes(favGenre))\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Recommendations</h2>\r\n\r\n      <p>books in your favorite genre <b>{favGenre}</b></p>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {favBooks.map(a =>\r\n            <tr key={a.title}>\r\n              <td>{a.title}</td>\r\n              <td>{a.author.name}</td>\r\n              <td>{a.published}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recommend"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\fullstack2021\\\\part8OG\\\\library-frontend\\\\src\\\\components\\\\Recommend.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { BOOKS_OF_GENRE, ME } from '../query';\n\nconst Recommend = props => {\n  const [genreBooks, result] = useLazyQuery(BOOKS_OF_GENRE, {\n    fetchPolicy: 'no-cache'\n  });\n  const [books, setBooks] = useState([]);\n  const user = useQuery(ME); // We have to wait for the user to have data\n\n  useEffect(() => {\n    if (user.data) {\n      genreBooks({\n        variables: {\n          genre: user.data.me.favoriteGenre\n        }\n      });\n    }\n  }, [genreBooks, user]); // We need to wait for the genreBooks to get it's data\n  // 2 useEffect hooks neede because we don't want another query done after\n  //user data has been received\n\n  useEffect(() => {\n    if (result.data && result.data.allBooks) {\n      setBooks(result.data.allBooks);\n    }\n  }, [result.data, books]);\n\n  if (!props.show) {\n    return null;\n  }\n\n  if (books.loading || user.loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"loading...\");\n  }\n\n  const favGenre = user.data.me.favoriteGenre;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Recommendations\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"books in your favorite genre \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, favGenre)), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"author\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"published\")), books.map(a => React.createElement(\"tr\", {\n    key: a.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, a.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, a.author.name), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, a.published))))));\n};\n\nexport default Recommend;","map":{"version":3,"sources":["C:/Users/Daniel/fullstack2021/part8OG/library-frontend/src/components/Recommend.js"],"names":["React","useEffect","useState","useLazyQuery","useQuery","BOOKS_OF_GENRE","ME","Recommend","props","genreBooks","result","fetchPolicy","books","setBooks","user","data","variables","genre","me","favoriteGenre","allBooks","show","loading","favGenre","map","a","title","author","name","published"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,gBAAvC;AACA,SAAUC,cAAV,EAA0BC,EAA1B,QAAoC,UAApC;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAE3B,QAAM,CAACC,UAAD,EAAaC,MAAb,IAAuBP,YAAY,CAACE,cAAD,EAAiB;AAAEM,IAAAA,WAAW,EAAE;AAAf,GAAjB,CAAzC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMY,IAAI,GAAGV,QAAQ,CAACE,EAAD,CAArB,CAJ2B,CAM3B;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGa,IAAI,CAACC,IAAR,EAAc;AACZN,MAAAA,UAAU,CAAC;AAAEO,QAAAA,SAAS,EAAE;AAACC,UAAAA,KAAK,EAAEH,IAAI,CAACC,IAAL,CAAUG,EAAV,CAAaC;AAArB;AAAb,OAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACV,UAAD,EAAaK,IAAb,CAJM,CAAT,CAP2B,CAa3B;AACA;AACA;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGS,MAAM,CAACK,IAAP,IAAeL,MAAM,CAACK,IAAP,CAAYK,QAA9B,EAAuC;AACrCP,MAAAA,QAAQ,CAACH,MAAM,CAACK,IAAP,CAAYK,QAAb,CAAR;AACD;AACF,GAJQ,EAIN,CAACV,MAAM,CAACK,IAAR,EAAcH,KAAd,CAJM,CAAT;;AAOA,MAAG,CAACJ,KAAK,CAACa,IAAV,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAGT,KAAK,CAACU,OAAN,IAAiBR,IAAI,CAACQ,OAAzB,EAAiC;AAC/B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD;;AAED,QAAMC,QAAQ,GAAGT,IAAI,CAACC,IAAL,CAAUG,EAAV,CAAaC,aAA9B;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAII,QAAJ,CAAhC,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAUGX,KAAK,CAACY,GAAN,CAAUC,CAAC,IACV;AAAI,IAAA,GAAG,EAAEA,CAAC,CAACC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,CAAC,CAACC,KAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,CAAC,CAACE,MAAF,CAASC,IAAd,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,CAAC,CAACI,SAAP,CAHF,CADD,CAVH,CADF,CAJF,CADF;AA4BD,CAhED;;AAkEA,eAAetB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useLazyQuery, useQuery } from '@apollo/client'\r\nimport {  BOOKS_OF_GENRE, ME } from '../query'\r\n\r\nconst Recommend = (props) => {\r\n\r\n  const [genreBooks, result] = useLazyQuery(BOOKS_OF_GENRE, { fetchPolicy: 'no-cache' })\r\n  const [books, setBooks] = useState([])\r\n  const user = useQuery(ME)\r\n\r\n  // We have to wait for the user to have data\r\n  useEffect(() => {\r\n    if(user.data) {\r\n      genreBooks({ variables: {genre: user.data.me.favoriteGenre}})\r\n    }\r\n  }, [genreBooks, user])\r\n\r\n  // We need to wait for the genreBooks to get it's data\r\n  // 2 useEffect hooks neede because we don't want another query done after\r\n  //user data has been received\r\n  useEffect(() => {\r\n    if(result.data && result.data.allBooks){\r\n      setBooks(result.data.allBooks)\r\n    }\r\n  }, [result.data, books])\r\n\r\n\r\n  if(!props.show){\r\n    return null\r\n  }\r\n\r\n  if(books.loading || user.loading){\r\n    return (\r\n      <div>\r\n        loading...\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const favGenre = user.data.me.favoriteGenre\r\n  return (\r\n    <div>\r\n      <h2>Recommendations</h2>\r\n\r\n      <p>books in your favorite genre <b>{favGenre}</b></p>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>\r\n              author\r\n            </th>\r\n            <th>\r\n              published\r\n            </th>\r\n          </tr>\r\n          {books.map(a =>\r\n            <tr key={a.title}>\r\n              <td>{a.title}</td>\r\n              <td>{a.author.name}</td>\r\n              <td>{a.published}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recommend"]},"metadata":{},"sourceType":"module"}
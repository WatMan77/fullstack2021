{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\fullstack2021\\\\part8OG\\\\library-frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('book-user-token');\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000'\n});\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Daniel/fullstack2021/part8OG/library-frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","setContext","getMainDefinition","WebSocketLink","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","concat","client","cache","link","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,QAAvC,EAAiDC,aAAjD,EAAgEC,KAAhE,QAA6E,gBAA7E;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAAEc,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIV,aAAJ,CAAkB;AAC/BS,EAAAA,GAAG,EAAG,6BADyB;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE;AADJ;AAFsB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGhB,KAAK,CACrB,CAAC;AAAEiB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBP,MARqB,EASrBT,QAAQ,CAACiB,MAAT,CAAgBV,QAAhB,CATqB,CAAvB;AAYA,MAAMW,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC9B2B,EAAAA,KAAK,EAAE,IAAIxB,aAAJ,EADuB;AAE9ByB,EAAAA,IAAI,EAAER;AAFwB,CAAjB,CAAf;AAKAtB,QAAQ,CAAC+B,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADF,EAICI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJD","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\r\nimport { setContext } from '@apollo/client/link/context'\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/client/link/ws'\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('book-user-token')\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `bearer ${token}` : null\r\n    }\r\n  }\r\n})\r\n\r\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000'})\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: `ws://localhost:4000/graphql`,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n})\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n)\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: splitLink\r\n})\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n      <App />\r\n  </ApolloProvider>,\r\n document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}